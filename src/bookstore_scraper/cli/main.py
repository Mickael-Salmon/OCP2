"""
üé® Interface CLI moderne avec Typer et Rich
"""
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.text import Text

from ..scraper import BookStoreScraper
from ..utils.file_handler import FileHandler, save_image

# Configuration de l'application Typer
app = typer.Typer(
    name="bookstore-scraper",
    help="üîç Scraper moderne pour analyser les prix de livres sur books.toscrape.com",
    add_completion=False,
    rich_markup_mode="rich"
)

console = Console()


def display_banner():
    """Affiche la banni√®re de bienvenue avec Rich."""
    banner = Panel.fit(
        Text("üìö BookStore Scraper 2.0", style="bold cyan", justify="center"),
        subtitle="Analyse moderne des prix de livres",
        style="blue"
    )
    console.print(banner)


def display_categories(categories):
    """Affiche la liste des cat√©gories dans un tableau Rich."""
    table = Table(title="üè∑Ô∏è Cat√©gories disponibles")
    table.add_column("Nom", style="cyan", no_wrap=True)
    table.add_column("ID", style="magenta")
    
    for i, category in enumerate(categories, 1):
        table.add_row(category.nom.title(), str(i))
    
    console.print(table)


@app.command("single")
def scrape_single_book(
    url: str = typer.Argument(..., help="URL du livre √† analyser"),
    output: Path = typer.Option(Path("output"), "--output", "-o", help="Dossier de sortie"),
    download_images: bool = typer.Option(False, "--images", "-i", help="T√©l√©charger les images")
):
    """üîç Analyse un livre unique √† partir de son URL."""
    display_banner()
    
    console.print(f"üîç [bold cyan]Analyse du livre: {url}[/bold cyan]")
    
    scraper = BookStoreScraper()
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        task = progress.add_task("üìñ Extraction des donn√©es...", total=None)
        
        book = scraper.get_book_details(url)
        
        if not book:
            console.print("[red]‚ùå Impossible de r√©cup√©rer les informations du livre[/red]")
            raise typer.Exit(1)
        
        progress.update(task, description="üíæ Sauvegarde en cours...")
        
        # Cr√©ation du dossier de sortie
        FileHandler.create_directory(output)
        
        # Sauvegarde en CSV
        csv_path = output / "single_book.csv"
        FileHandler.save_books_to_csv([book.to_dict()], csv_path)
        
        # T√©l√©chargement de l'image si demand√©
        if download_images and book.image_url:
            img_dir = output / "images"
            FileHandler.create_directory(img_dir)
            
            img_filename = FileHandler.sanitize_filename(book.title) + ".jpg"
            img_path = img_dir / img_filename
            
            progress.update(task, description="üñºÔ∏è T√©l√©chargement image...")
            save_image(book.image_url, img_path)
    
    # Affichage des r√©sultats
    result_table = Table(title="üìä R√©sultats de l'analyse")
    result_table.add_column("Propri√©t√©", style="cyan")
    result_table.add_column("Valeur", style="green")
    
    result_table.add_row("Titre", book.title)
    result_table.add_row("Prix TTC", book.formatted_price_inc_tax)
    result_table.add_row("Prix HT", book.formatted_price_exc_tax)
    result_table.add_row("Cat√©gorie", book.category)
    result_table.add_row("Note", book.review_rating)
    result_table.add_row("Disponibilit√©", str(book.availability_number))
    
    console.print(result_table)
    console.print(f"‚úÖ [green]Donn√©es sauvegard√©es dans: {csv_path}[/green]")


@app.command("category")
def scrape_category(
    output: Path = typer.Option(Path("output"), "--output", "-o", help="Dossier de sortie"),
    download_images: bool = typer.Option(False, "--images", "-i", help="T√©l√©charger les images"),
    category_name: Optional[str] = typer.Option(None, "--name", "-n", help="Nom de la cat√©gorie")
):
    """üìö Analyse tous les livres d'une cat√©gorie sp√©cifique."""
    display_banner()
    
    scraper = BookStoreScraper()
    
    # R√©cup√©ration des cat√©gories
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        task = progress.add_task("üîç R√©cup√©ration des cat√©gories...", total=None)
        categories = scraper.get_all_categories()
    
    if not categories:
        console.print("[red]‚ùå Aucune cat√©gorie trouv√©e[/red]")
        raise typer.Exit(1)
    
    # S√©lection de la cat√©gorie
    if category_name:
        selected_category = next((cat for cat in categories if cat.nom == category_name.lower()), None)
        if not selected_category:
            console.print(f"[red]‚ùå Cat√©gorie '{category_name}' non trouv√©e[/red]")
            display_categories(categories)
            raise typer.Exit(1)
    else:
        display_categories(categories)
        
        while True:
            choice = Prompt.ask("Choisissez une cat√©gorie (num√©ro ou nom)", default="1")
            
            # Essaie d'interpr√©ter comme un num√©ro
            try:
                idx = int(choice) - 1
                if 0 <= idx < len(categories):
                    selected_category = categories[idx]
                    break
            except ValueError:
                # Essaie d'interpr√©ter comme un nom
                selected_category = next((cat for cat in categories if cat.nom == choice.lower()), None)
                if selected_category:
                    break
            
            console.print("[red]‚ùå Choix invalide[/red]")
    
    console.print(f"üìö [bold cyan]Cat√©gorie s√©lectionn√©e: {selected_category.nom.title()}[/bold cyan]")
    
    # R√©cup√©ration des liens des livres
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        task = progress.add_task("üîó R√©cup√©ration des liens...", total=None)
        book_links = scraper.get_books_from_category(selected_category)
    
    if not book_links:
        console.print("[red]‚ùå Aucun livre trouv√© dans cette cat√©gorie[/red]")
        raise typer.Exit(1)
    
    console.print(f"üìñ [green]{len(book_links)} livres trouv√©s[/green]")
    
    # Scraping des livres
    books_data = []
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        console=console
    ) as progress:
        task = progress.add_task("üìñ Extraction des donn√©es...", total=len(book_links))
        
        for i, book_url in enumerate(book_links):
            book = scraper.get_book_details(book_url)
            if book:
                books_data.append(book.to_dict())
                
                # T√©l√©chargement d'image si demand√©
                if download_images and book.image_url:
                    img_dir = output / selected_category.safe_name / "images"
                    FileHandler.create_directory(img_dir)
                    
                    img_filename = FileHandler.sanitize_filename(book.title) + ".jpg"
                    img_path = img_dir / img_filename
                    save_image(book.image_url, img_path)
            
            progress.update(task, advance=1, description=f"üìñ Livre {i+1}/{len(book_links)}")
    
    # Sauvegarde
    cat_dir = output / selected_category.safe_name
    FileHandler.create_directory(cat_dir)
    
    csv_path = cat_dir / f"{selected_category.safe_name}.csv"
    FileHandler.save_books_to_csv(books_data, csv_path)
    
    console.print(f"‚úÖ [green]{len(books_data)} livres sauvegard√©s dans: {csv_path}[/green]")


@app.command("all")
def scrape_all_books(
    output: Path = typer.Option(Path("output"), "--output", "-o", help="Dossier de sortie"),
    download_images: bool = typer.Option(False, "--images", "-i", help="T√©l√©charger les images")
):
    """üåç Analyse TOUS les livres du site (attention: tr√®s long!)."""
    display_banner()
    
    if not Confirm.ask("‚ö†Ô∏è Cette op√©ration peut prendre plusieurs heures. Continuer?"):
        raise typer.Exit()
    
    scraper = BookStoreScraper()
    
    # R√©cup√©ration des cat√©gories
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        task = progress.add_task("üîç R√©cup√©ration des cat√©gories...", total=None)
        categories = scraper.get_all_categories()
    
    if not categories:
        console.print("[red]‚ùå Aucune cat√©gorie trouv√©e[/red]")
        raise typer.Exit(1)
    
    console.print(f"üìö [green]{len(categories)} cat√©gories √† traiter[/green]")
    
    # Traitement de toutes les cat√©gories
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        console=console
    ) as progress:
        main_task = progress.add_task("üè∑Ô∏è Cat√©gories", total=len(categories))
        
        for category in categories:
            progress.update(main_task, description=f"üìö {category.nom.title()}")
            
            # R√©cup√®re les livres de la cat√©gorie
            book_links = scraper.get_books_from_category(category)
            
            if book_links:
                books_data = []
                book_task = progress.add_task(f"  üìñ Livres de {category.nom}", total=len(book_links))
                
                for book_url in book_links:
                    book = scraper.get_book_details(book_url)
                    if book:
                        books_data.append(book.to_dict())
                        
                        # Images si demand√©
                        if download_images and book.image_url:
                            img_dir = output / category.safe_name / "images"
                            FileHandler.create_directory(img_dir)
                            
                            img_filename = FileHandler.sanitize_filename(book.title) + ".jpg"
                            img_path = img_dir / img_filename
                            save_image(book.image_url, img_path)
                    
                    progress.update(book_task, advance=1)
                
                # Sauvegarde de la cat√©gorie
                cat_dir = output / category.safe_name
                FileHandler.create_directory(cat_dir)
                
                csv_path = cat_dir / f"{category.safe_name}.csv"
                FileHandler.save_books_to_csv(books_data, csv_path)
                
                progress.remove_task(book_task)
            
            progress.update(main_task, advance=1)
    
    console.print("‚úÖ [green]Scraping complet termin√©![/green]")


@app.command("interactive")
def interactive_mode():
    """üéÆ Mode interactif avec menu."""
    display_banner()
    
    while True:
        console.print("\\n[bold cyan]üéØ Que souhaitez-vous faire ?[/bold cyan]")
        
        choices_table = Table()
        choices_table.add_column("Option", style="magenta")
        choices_table.add_column("Description", style="cyan")
        
        choices_table.add_row("1", "üîç Analyser un livre (URL)")
        choices_table.add_row("2", "üìö Analyser une cat√©gorie")
        choices_table.add_row("3", "üåç Analyser tout le site")
        choices_table.add_row("0", "‚ùå Quitter")
        
        console.print(choices_table)
        
        choice = Prompt.ask("Votre choix", choices=["0", "1", "2", "3"], default="1")
        
        if choice == "0":
            console.print("üëã [yellow]Au revoir![/yellow]")
            break
        elif choice == "1":
            url = Prompt.ask("üîó URL du livre")
            download_imgs = Confirm.ask("üñºÔ∏è T√©l√©charger les images?", default=False)
            scrape_single_book(url, Path("output"), download_imgs)
        elif choice == "2":
            download_imgs = Confirm.ask("üñºÔ∏è T√©l√©charger les images?", default=False)
            scrape_category(Path("output"), download_imgs, None)
        elif choice == "3":
            download_imgs = Confirm.ask("üñºÔ∏è T√©l√©charger les images?", default=False)
            scrape_all_books(Path("output"), download_imgs)


if __name__ == "__main__":
    app()
